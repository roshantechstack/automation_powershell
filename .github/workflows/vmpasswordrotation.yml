name: Rotate Azure VM Passwords

on:
 workflow_dispatch:
  # schedule:
  #   - cron:  '0 0 28 * *' # Run the workflow every 28th day of the month

env:
  CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  VAULT_NAME: my-key-vault

jobs:
  rotate_passwords:
    runs-on: ubuntu-latest

    steps:
    - name: Set up Python environment
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m venv .env
        source .env/bin/activate
        pip install azure-keyvault-secrets azure-mgmt-compute
  
    - name: Rotate passwords for all VMs
      run: |
        import random
        import string
        import azure.keyvault.secrets as kv_secrets
        import azure.mgmt.compute as compute

        # Define the list of virtual machine names
        vm_names = ['vm1', 'vm2', 'vm3', 'vm4', 'vm5', 'vm6']

        # Generate new random passwords for each VM
        new_passwords = {vm: ''.join(random.choice(string.ascii_letters + string.digits) for i in range(16)) for vm in vm_names}

        # Authenticate to Azure Key Vault
        credential=kv_secrets.ClientSecretCredential(
            os.environ['CLIENT_ID'],
            os.environ['CLIENT_SECRET'],
            os.environ['TENANT_ID']
        )

        # Update the Key Vault with the new passwords
        keyvault_client = kv_secrets.SecretClient(
            vault_url=f"https://{os.environ['VAULT_NAME']}.vault.azure.net/",
            credential=credential
        )
        for vm, password in new_passwords.items():
            keyvault_client.set_secret(vm, password)

        # Update the virtual machines with the new passwords
        compute_client = compute.ComputeManagementClient(
            credential=credential,
            subscription_id=os.environ['AZURE_SUBSCRIPTION_ID']
        )
        for vm in vm_names:
            vm = compute_client.virtual_machines.get(os.environ['AZURE_RESOURCE_GROUP'], vm)
            vm.admin_password = new_passwords[vm.name]
            vm.update()

    - name: Send notification to Teams channel
      uses: pnp/teams-notify@v1
      with:
        teamsUrl: ${{ secrets.TEAMS_WEBHOOK_URL }}
        message: |
          The passwords rotated successfully
